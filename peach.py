import json
import sys
import os
from colorama import Fore, Back, Style, colorama_text
from random_emoticon import get_emoticon

# syntax for creating environment
create_syntax = ['create', '-c']

# expected number of arguments1
expected_args = 3

chosen_language = None
languages = []

# opens json file for reading
f = open('options.json')
data = json.load(f)

# function for throwing errors (with random emoticons!)
def throw_err(txt=f"{get_emoticon()} A wild error occured! {get_emoticon()}", clr=Fore.RED):
    print(f"{clr}{get_emoticon()} whoops, {txt} {get_emoticon()}")
    print(Fore.RESET) # reset color

# checks if we have enough or too many arguments
def check_args():
    if (len(args) != expected_args):
        print(f"got argument {str(len(args))} but expected {str(expected_args)}!")
        return False
    else:
        return True

# gets the file extension for the given language
def get_extension(language):
    language = language.lower()

    for lang in data['languages']:
        if lang['name'].lower() == language:
            return lang['extension']

# creates a folder with the given name at the given location
# and creates a file for the chosen programming language
def create_environment(name, location):
    global chosen_language

    # checks if the path exists
    if os.path.exists(location):
        # changes directory to that path
        os.chdir(location)

        # creates file with the given filename
        os.mkdir(name)

        # change path to the given path
        os.chdir(os.path.join(name))

        # creating file
        f = open(f'main.{get_extension(chosen_language)}', 'w')
        f.close()

        # printing success message
        print(Fore.BLUE + chosen_language.title() + " environment successfully set up!") ; print(Fore.RESET)
        creds = open('peach.txt', 'w')
        creds.write('environment generated by peach: https://github.com/UtilityDev/peach') ; creds.close()
        return True
    else:
        print(location + " is not a valid path!")
        return False

args = sys.argv # just so I don't have to type 'sys.argv' all the time, hehe

def try_again_invalid_path():
    response = str(input("Failed to create environment. Would you like to try again? (y/n)"))

    if(response.lower() != 'y'):
        print("Have a good day!")
        return False
    return True

def main():
    global chosen_language
    os.system('clear')
    # loops through every language in the json file
    # and lowers the names
    for lang in data['languages']:
        languages.append(lang['name'].lower())
    
    createdEnvironment = True
    # if we have the right amount of arguments
    
    while True:
        if check_args() is True:
            os.system('clear')
        # if we have '-c' or 'create' as an argument
            if args[1].lower() in create_syntax:
            # if the language we entered is a valid language
                if args[2].lower() in languages:
                # sets the chosen language to the language we entered in
                    chosen_language = args[2]
                    print("✨ Creating a " + chosen_language.title() + " masterpiece! ✨")

                # asks user for folder name and location (to be used in create_environment function)
                    folder_name = str(input('Project name: '))
                    folder_loc = str(input("Where do you want to place your project? (full path): "))
                    createdEnvironment = create_environment(folder_name, folder_loc)

                    if(createdEnvironment):
                        break

                    if(try_again_invalid_path() == False):
                        break
                    
                else:
                    print("that language doesn't exist!")
                    createdEnvironment = False

if __name__ == '__main__':
    main()
